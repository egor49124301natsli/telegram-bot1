from aiogram import types
from aiogram.dispatcher import Dispatcher
from services.binance_api import get_binance_price
from services.news import get_crypto_news
from services.sport_news import get_latest_sport_news
from database.session import add_user

async def start_command(message: types.Message):
    add_user(message.from_user.id)
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto-Bot!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã:\n"
        "‚Äî –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (/btc, /eth, /ton, /xrp)\n"
        "‚Äî –ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏ (/news)\n"
        "‚Äî –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (/sportnews)\n"
        "‚Äî –ü—Ä–æ–≥–Ω–æ–∑—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–ø—Ä–µ–º–∏—É–º)\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."
    )

async def btc_command(message: types.Message):
    add_user(message.from_user.id)
    price = get_binance_price("BTCUSDT")
    await message.answer(f"–ö—É—Ä—Å BTC/USDT –Ω–∞ Binance: <b>{price}</b>")

async def eth_command(message: types.Message):
    add_user(message.from_user.id)
    price = get_binance_price("ETHUSDT")
    await message.answer(f"–ö—É—Ä—Å ETH/USDT –Ω–∞ Binance: <b>{price}</b>")

async def ton_command(message: types.Message):
    add_user(message.from_user.id)
    price = get_binance_price("TONUSDT")
    await message.answer(f"–ö—É—Ä—Å TON/USDT –Ω–∞ Binance: <b>{price}</b>")

async def xrp_command(message: types.Message):
    add_user(message.from_user.id)
    price = get_binance_price("XRPUSDT")
    await message.answer(f"–ö—É—Ä—Å XRP/USDT –Ω–∞ Binance: <b>{price}</b>")

async def news_command(message: types.Message):
    add_user(message.from_user.id)
    news = get_crypto_news()
    if not news:
        await message.answer("–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")
    else:
        for n in news:
            await message.answer(n)

async def sportnews_command(message: types.Message):
    add_user(message.from_user.id)
    news = get_latest_sport_news()
    if not news:
        await message.answer("–ù–µ—Ç —Å–≤–µ–∂–∏—Ö —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")
    else:
        for n in news:
            await message.answer(n)

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_command, commands=['start', 'help'])
    dp.register_message_handler(btc_command, commands=['btc'])
    dp.register_message_handler(eth_command, commands=['eth'])
    dp.register_message_handler(ton_command, commands=['ton'])
    dp.register_message_handler(xrp_command, commands=['xrp'])
    dp.register_message_handler(news_command, commands=['news'])
    dp.register_message_handler(sportnews_command, commands=['sportnews'])
